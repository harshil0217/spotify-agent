# Week 1: Setting Up Your Enviornment, APIs, and Agent

Hey! Thanks for joining the Spotify Agent Project. This week, we'll be taking care of all of the boring but necessary stuff that will ensure you have the tools you need to build. But I'll also hope to introduce some fundamental concepts that we'll be expanding upon later on.

## Demo

At the end of the semester you'll build something that looks like [this](https://www.youtube.com/watch?v=rfwHYzJKaa8&t=10s). If that seems a little basic, don't worry! At the end of the semester, you'll have a few weeks to engineer and add your own features. Actually, we'll be using the quality and utility of these unique features to determine winners for the beginner project.

## 1. Setting Up Your Development Enviornment

### 1.1 Installing Python

For Windows:

Go to https://www.python.org/downloads/ 

Download Python 3.11 or later for your operating system.

Run the installer. On Windows, make sure to check "Add Python to PATH."

Verify the installation:

Open a command prompt or terminal.

Type python --version and press "Enter".

You should see the Python version number.

For Mac: Python is usually installed by default. Open a terminal and type python3 to confirm if it is. 

### 1.2 Installing Git and Setting up your repo

If you aren't familiar with Git and GitHub, don't worry. Git is what is called a "version control tool" that basically allows use to save and keep a record of our code as it evolves over time. GitHub is a website that maintains a copy of this record online.

Here's how to install Git on your system:

Windows:
1. Go to https://git-scm.com/download/win and download the installer
2. Run the installer, accepting the default options
3. Make sure "Git from the Command Line and also from 3rd-party software" is selected
4. Complete the installation and open Command Prompt
5. Type `git --version` to verify the installation

macOS:
1. Open Terminal
2. Type `xcode-select --install` and follow the prompts
   (Or if you use Homebrew: `brew install git`)
3. Type `git --version` to verify

Linux (Ubuntu/Debian):
1. Open Terminal
2. Run: `sudo apt update && sudo apt install git -y`
3. Type `git --version` to verify

After installation, configure your identity:

```sh
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```

### Setting up GitHub and Authentication

1. Create a GitHub Account:
   - Go to [github.com](https://github.com) and click "Sign up"
   - Enter your email, create a password, and choose a username
   - Verify your email address when prompted

2. Create a Personal Access Token (PAT):
   - Click your profile picture → Settings → Developer settings → Personal access tokens → Tokens (classic)
   - Click "Generate new token (classic)"
   - Give it a name like "My Computer"
   - Select scopes: at minimum, check "repo" and "workflow"
   - Copy the token immediately - you won't see it again!

3. Configure Git to remember your credentials:

```sh
git config --global credential.helper store
```

Then the first time you push to GitHub, enter your username and use your PAT as the password. Git will remember it for future uses.

Now you can create your first repository. In GitHub, make a new repository. Give it Public visibility.

Go to that repo and click the "Code" tab, then copy the link within the "Quick setup" box

In the IDE of your choice (I would recommend VS Code because that is what was used to make this project), clone the repo by pasting the link you copied in the previous step. If you're using VS Code, you can do this by clicking the "Clone Git Repository" button and pasting the link in the input field. Then choose a good folder for your project to be cloned to on your computer

In the root of your new directory, create a .gitignore file, which tells our version control software (git) what not to keep track of or share publicly. We'll eventually add a ton of files to our directory that we either don't want to share or don't care enough to track. As we build our project, we'll include the addrees of such files here.

### 1.3 Installing UV (Python Package Manager)

To handle package installation and dependency management, we're gonna be using a tool called UV. You may have heard of pip (a python package installation tool) and venv (a python enviorment tool). UV combines both into one unified tool for developing in python. 

#### For Windows:

1. Open PowerShell as Administrator
2. Run this command:
` powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex" `
3. Close and reopen your terminal to refresh the PATH
4. Verify installation by typing uv --version

#### For Mac:

1. Open Terminal
2. Run this command
`curl -LsSf https://astral.sh/uv/install.sh | sh`
3. Restart your terminal or run source ~/.bashrc (or source ~/.zshrc if using zsh)
4. Verify installation by typing uv --version

### 1.4 Setting Up Your UV Environment

Now that UV is installed, let's create a proper Python environment for our project:

#### Initialize your project:

1. Navigate to your cloned repository directory in terminal/command prompt
2. Initialize a new UV project:
`uv init`

This creates a pyproject.toml file that will track our project configuration and dependencies. This is useful in case we want to export our project or share it with someone else (we'll have a detailed record of what dependencies exactly are needed).

#### Create and activate a virtual environment:
We are now going to create a virtual enviornment for our project. If you aren't aware, virtual enviornments allow us to install specific libraries for just this project without affecting our python installation globally. 

Create a virtual environment with Python 3.11+:
`uv venv --python 3.11`

Activate the environment:
Windows:
`.venv\Scripts\activate`

Mac/Linux:
`source .venv/bin/activate`

#### Update your gitignore

Let's go back to the .gitignore file from earlier. All of the packages and source code installed within our venv are not worth tracking and may cause git errors as our project complexity grows.

Add the following to your gitignore:

```gitignore
# Virtual environment
.venv/
venv/
env/
```

## Signing up
